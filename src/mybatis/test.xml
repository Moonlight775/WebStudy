<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
		
<mapper namespace="test">
	<resultMap type="mybatis.EmpVo" id="emp_map">
		<result property="employeeId" column="employee_id"/>
		<result property="firstName" 	 column="first_name"/>
		<result property="phoneNumber" column="phone_number"/>
		<result property="salary" 		 column="salary"/>
	</resultMap>
	
	<!-- 사번을 사용하여 사원의 이름을 리턴 -->
	<select id="test_emp" parameterType="Integer" resultType="String">
		SELECT first_name FROM employees WHERE EMPLOYEE_ID = #{_parameter}
	</select>
	
	<!-- 부서코드를 입력받아 부서명을 출력 -->
	<select id="get_dep_name" parameterType="Integer" resultType="String">
		SELECT department_name from departments where department_ID = #{_parameter}
	</select>
	
	<!-- 제품 목록을 모두 출력 -->
	<select id="all_product" resultType='product.ProductVo'>
		select * from product
	</select>
	
	<!-- 부서코드가 100번인 직원들의 사번, 이름, 급여, 연락처를 조회 -->
	<select id="get_info_100" parameterType="Integer" resultMap="emp_map">
		select employee_id, first_name, salary, phone_number from employees 
		where department_ID = #{_parameter}
	</select>
	
	<insert id="product_insert" parameterType="product.ProductVo">
		insert into product(serial, gubun, nal, pcode, pname, ea, price, amt, mid)
			values(seq_product.nextval, #{gubun}, sysdate, #{pCode}, #{pName},
						#{ea}, #{price}, #{amt}, #{mid})
	</insert>
	
	<update id="product_update" parameterType="product.ProductVo">
		update product set ea=#{ea}, price=#{price}, amt=ea*price where serial = #{serial}
	</update>
	
	<delete id="product_delete" parameterType="Integer">
		delete from product where serial= #{serial}
	</delete>
	
	<!-- 입력된 mid가 null이 아닌경우에만 where조건이 실행되도록 조치 -->
	<select id="if_test" parameterType="String" resultType="member.MemberVo">
		select * from member
		<if test="_parameter !=null">
			where mid = #{_parameter}
		</if>
	</select>
	
	<!-- 입사 분기별 직원 명단 -->
	<select id="emp_list" parameterType="Integer" resultMap="emp_map">
		select * from employees
		<choose>
			<when test="_parameter == 1">
				where to_char(hire_date, 'mm') between '01' and '03'
			</when>
			<when test="_parameter == 2">
				where to_char(hire_date, 'mm') between '04' and '06'
			</when>
			<when test="_parameter == 3">
				where to_char(hire_date, 'mm') between '07' and '09'
			</when>
			<otherwise>
				where to_char(hire_date, 'mm') between '10' and '12'
			</otherwise>
			
		</choose>
	</select>
	
	<!-- findStr에 값이 전달된 경우에만 employees 테이블의 first_name에 findStr이 포함된 명단을 EmpVo에 담아 리턴 -->
	<select id="emp_find" parameterType="String" resultMap="emp_map">
		select * from employees
		
		<where>
			<if test="_parameter !=null">
				first_name like '%${_parameter}%'
			</if>
		</where>
	</select>
	
</mapper>





















